basePath: /api/v1
definitions:
  api.Episode:
    properties:
      episodeNumber:
        type: integer
      episodeTMDBID:
        type: integer
      media:
        $ref: '#/definitions/db.Media'
      mediaID:
        type: integer
      name:
        type: string
      overview:
        type: string
      runtime:
        type: integer
      seasonNumber:
        type: integer
      stillPath:
        type: string
    type: object
  api.Movie:
    properties:
      backdropImage:
        type: string
      media:
        $ref: '#/definitions/db.Media'
      mediaID:
        type: integer
      releaseDate:
        type: string
      runtime:
        type: integer
    type: object
  api.Season:
    properties:
      episodeCount:
        type: integer
      episodes:
        items:
          $ref: '#/definitions/api.Episode'
        type: array
      media:
        $ref: '#/definitions/db.Media'
      mediaID:
        type: integer
      name:
        type: string
      overview:
        type: string
      posterPath:
        type: string
      seasonNumber:
        type: integer
      seasonTMDBID:
        type: integer
    type: object
  api.TV:
    properties:
      backdropImage:
        type: string
      episodeCount:
        type: integer
      firstAirDate:
        type: string
      lastAirDate:
        type: string
      media:
        $ref: '#/definitions/db.Media'
      mediaID:
        type: integer
      seasonCount:
        type: integer
      seasons:
        items:
          $ref: '#/definitions/api.Season'
        type: array
    type: object
  db.CurrentlyWatching:
    type: object
  db.Genre:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  db.Media:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      genres:
        items:
          $ref: '#/definitions/db.Genre'
        type: array
      id:
        type: integer
      mediaType:
        $ref: '#/definitions/db.MediaType'
      mediaTypeId:
        type: integer
      overview:
        type: string
      posterImage:
        type: string
      title:
        type: string
      tmdbid:
        type: integer
    type: object
  db.MediaType:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.Config:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      name:
        type: string
      value:
        type: string
    type: object
  models.User:
    type: object
  models.UserConfig:
    properties:
      config:
        $ref: '#/definitions/models.Config'
      configID:
        type: integer
      createdAt:
        type: string
      deletedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
externalDocs:
  description: OpenAPI Specification for DOCSWAP
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@doc-swap.com
    name: DOC-SWAP Support
    url: http://www.doc-swap.com/support
  description: DOCSWAP is a platform designed for realtors to efficiently share, manage,
    and analyze documents on a neighborhood level. It enables realtors to make better
    use of the content created for each listing by organizing it into a searchable
    database that supports both uploads and downloads of documents. These documents
    are categorized to facilitate market analysis, putting the power of data directly
    into the hands of realtors and market analysts interested in housing information
    in the lower mainland.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: DOCSWAP API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Authenticates a user using the provided username and password,
        and returns a JWT token in a cookie if successful.
      parameters:
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in, JWT set in cookie
          schema:
            type: string
        "400":
          description: Invalid username or password
          schema:
            additionalProperties: true
            type: object
      summary: Logs in valid users
      tags:
      - Auth
  /cdn/movie/{tmdbId}:
    get:
      consumes:
      - application/json
      description: Retrieve HTML content for a movie based on the provided tmdbId
      parameters:
      - description: tmdbId of the movie
        in: path
        name: tmdbId
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: HTML content of the movie
          schema:
            type: string
        "400":
          description: 'Error: Unable to procure content'
          schema:
            type: object
      summary: Get movie content by tmdbId
      tags:
      - cdn
  /cdn/tv/{tmdbId}/{seasonNum}/{episodeNum}:
    get:
      consumes:
      - application/json
      description: Retrieve HTML content for a tv episode based on the provided tmdbId,
        season number and episode number
      parameters:
      - description: tmdbId of the movie
        in: path
        name: tmdbId
        required: true
        type: string
      - description: season number of the episode
        in: path
        name: seasonNum
        required: true
        type: number
      - description: episode number of the episode
        in: path
        name: episodeNum
        required: true
        type: number
      produces:
      - text/html
      responses:
        "200":
          description: HTML content of the movie
          schema:
            type: string
        "400":
          description: 'Error: Unable to procure content'
          schema:
            type: object
      summary: Get movie content by tmdbId, season number and episode number
      tags:
      - cdn
  /currently-watching/:
    post:
      consumes:
      - application/json
      description: create a new currently watching record
      parameters:
      - description: CurrentlyWatching object that needs to be created
        in: body
        name: watch
        required: true
        schema:
          $ref: '#/definitions/db.CurrentlyWatching'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the currently watching record
          schema:
            $ref: '#/definitions/db.CurrentlyWatching'
        "400":
          description: 'Error: Invalid request body'
          schema:
            additionalProperties: true
            type: object
      summary: Create a new currently watching record
      tags:
      - currently-watching
    put:
      consumes:
      - application/json
      description: update a currently watching record
      parameters:
      - description: CurrentlyWatching object that needs to be updated
        in: body
        name: watch
        required: true
        schema:
          $ref: '#/definitions/db.CurrentlyWatching'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the currently watching record
          schema:
            $ref: '#/definitions/db.CurrentlyWatching'
        "400":
          description: 'Error: Invalid request body'
          schema:
            additionalProperties: true
            type: object
      summary: Update a currently watching record
      tags:
      - currently-watching
  /currently-watching/{userID}/{mediaId}/:
    get:
      consumes:
      - application/json
      description: get a currently watching record
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Media ID
        in: path
        name: mediaId
        required: true
        type: string
      - default: false
        description: Set to false to exclude soft deleted record
        in: query
        name: includeDeleted
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the currently watching record
          schema:
            $ref: '#/definitions/db.CurrentlyWatching'
        "400":
          description: 'Error: Record not found'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve a currently watching record
      tags:
      - currently-watching
  /movie/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve the details of a movie from TMDB using the id
      parameters:
      - description: tmdbId of the movie
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The movie record
          schema:
            $ref: '#/definitions/api.Movie'
        "400":
          description: 'Error: Unable to procure content'
          schema:
            type: object
      summary: Get movie details by id
      tags:
      - movie
  /search/multi:
    get:
      consumes:
      - application/json
      description: Get multimedia content based on the search query.
      parameters:
      - description: Search query for multimedia content
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved multimedia search results
          schema:
            items:
              type: object
            type: array
        "400":
          description: 'Error: Invalid or empty query, or no results found'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve multimedia search results
      tags:
      - search
  /tv/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve the details of a tv show from TMDB using the id
      parameters:
      - description: tmdbId of the tv show
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The tv record
          schema:
            $ref: '#/definitions/api.TV'
        "400":
          description: 'Error: Unable to procure content'
          schema:
            type: object
      summary: Get tv show details by id
      tags:
      - tv
  /tv/{id}/season/{seasonNum}/episodes:
    get:
      consumes:
      - application/json
      description: Retrieve a list of episodes in a specific season of a tv show
      parameters:
      - description: tmdbId of the tv show
        in: path
        name: id
        required: true
        type: string
      - description: the season number
        in: path
        name: seasonNum
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: The list of tv records in that season
          schema:
            items:
              $ref: '#/definitions/api.TV'
            type: array
        "400":
          description: 'Error: Unable to procure content'
          schema:
            type: object
      summary: Get episodes of a show by season number
      tags:
      - tv
  /user/:
    get:
      consumes:
      - application/json
      description: get all user records
      parameters:
      - default: false
        description: Set to true to include soft deleted users
        in: query
        name: includeDeleted
        type: boolean
      - default: false
        description: Set to true to include full user details
        in: query
        name: full
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the list of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: 'Error: No user records found'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create a new user record
      parameters:
      - description: User object that needs to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 'Error: Invalid request body'
          schema:
            additionalProperties: true
            type: object
      summary: Create a new user
      tags:
      - users
  /user/{id}/:
    delete:
      consumes:
      - application/json
      description: delete a user record
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - default: true
        description: Set to false to disable soft delete
        in: query
        name: softDelete
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the user
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Error: Invalid user ID'
          schema:
            additionalProperties: true
            type: object
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get a user record
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - default: false
        description: Set to true to include soft deleted user
        in: query
        name: includeDeleted
        type: boolean
      - default: false
        description: Set to true to include full user details
        in: query
        name: full
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 'Error: No user records found'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update a user record
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User object that needs to be updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 'Error: Invalid request body'
          schema:
            additionalProperties: true
            type: object
      summary: Update a user
      tags:
      - users
  /user/current/:
    get:
      consumes:
      - application/json
      description: get the current user record
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the current user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 'Error: No user records found'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve the current user
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
