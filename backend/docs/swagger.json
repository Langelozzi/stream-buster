{
    "swagger": "2.0",
    "info": {
        "description": "DOCSWAP is a platform designed for realtors to efficiently share, manage, and analyze documents on a neighborhood level. It enables realtors to make better use of the content created for each listing by organizing it into a searchable database that supports both uploads and downloads of documents. These documents are categorized to facilitate market analysis, putting the power of data directly into the hands of realtors and market analysts interested in housing information in the lower mainland.",
        "title": "DOCSWAP API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "DOC-SWAP Support",
            "url": "http://www.doc-swap.com/support",
            "email": "support@doc-swap.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates a user using the provided username and password, and returns a JWT token in a cookie if successful.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logs in valid users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in, JWT set in cookie",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid username or password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/cdn/movie/{tmdbId}": {
            "get": {
                "description": "Retrieve HTML content for a movie based on the provided tmdbId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "cdn"
                ],
                "summary": "Get movie content by tmdbId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tmdbId of the movie",
                        "name": "tmdbId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTML content of the movie",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error: Unable to procure content",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/cdn/tv/{tmdbId}/{seasonNum}/{episodeNum}": {
            "get": {
                "description": "Retrieve HTML content for a tv episode based on the provided tmdbId, season number and episode number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "cdn"
                ],
                "summary": "Get movie content by tmdbId, season number and episode number",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tmdbId of the movie",
                        "name": "tmdbId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "season number of the episode",
                        "name": "seasonNum",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "episode number of the episode",
                        "name": "episodeNum",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTML content of the movie",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error: Unable to procure content",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/currently-watching/": {
            "put": {
                "description": "update a currently watching record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currently-watching"
                ],
                "summary": "Update a currently watching record",
                "parameters": [
                    {
                        "description": "CurrentlyWatching object that needs to be updated",
                        "name": "watch",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.CurrentlyWatching"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the currently watching record",
                        "schema": {
                            "$ref": "#/definitions/db.CurrentlyWatching"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "create a new currently watching record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currently-watching"
                ],
                "summary": "Create a new currently watching record",
                "parameters": [
                    {
                        "description": "CurrentlyWatching object that needs to be created",
                        "name": "watch",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.CurrentlyWatching"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the currently watching record",
                        "schema": {
                            "$ref": "#/definitions/db.CurrentlyWatching"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/currently-watching/{userID}/{mediaId}/": {
            "get": {
                "description": "get a currently watching record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currently-watching"
                ],
                "summary": "Retrieve a currently watching record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media ID",
                        "name": "mediaId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to false to exclude soft deleted record",
                        "name": "includeDeleted",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the currently watching record",
                        "schema": {
                            "$ref": "#/definitions/db.CurrentlyWatching"
                        }
                    },
                    "400": {
                        "description": "Error: Record not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/movie/{id}": {
            "get": {
                "description": "Retrieve the details of a movie from TMDB using the id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "Get movie details by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tmdbId of the movie",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The movie record",
                        "schema": {
                            "$ref": "#/definitions/api.Movie"
                        }
                    },
                    "400": {
                        "description": "Error: Unable to procure content",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/search/multi": {
            "get": {
                "description": "Get multimedia content based on the search query.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Retrieve multimedia search results",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query for multimedia content",
                        "name": "query",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved multimedia search results",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Invalid or empty query, or no results found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tv/{id}": {
            "get": {
                "description": "Retrieve the details of a tv show from TMDB using the id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tv"
                ],
                "summary": "Get tv show details by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tmdbId of the tv show",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The tv record",
                        "schema": {
                            "$ref": "#/definitions/api.TV"
                        }
                    },
                    "400": {
                        "description": "Error: Unable to procure content",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/tv/{id}/season/{seasonNum}/episodes": {
            "get": {
                "description": "Retrieve a list of episodes in a specific season of a tv show",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tv"
                ],
                "summary": "Get episodes of a show by season number",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tmdbId of the tv show",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "the season number",
                        "name": "seasonNum",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of tv records in that season",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TV"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Unable to procure content",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/user/": {
            "get": {
                "description": "get all user records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve all users",
                "parameters": [
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted users",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full user details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: No user records found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "create a new user record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User object that needs to be created",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/user/current/": {
            "get": {
                "description": "get the current user record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve the current user",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the current user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Error: No user records found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/user/{id}/": {
            "get": {
                "description": "get a user record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted user",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full user details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Error: No user records found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "update a user record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User object that needs to be updated",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "delete a user record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Set to false to disable soft delete",
                        "name": "softDelete",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Episode": {
            "type": "object",
            "properties": {
                "episodeNumber": {
                    "type": "integer"
                },
                "episodeTMDBID": {
                    "type": "integer"
                },
                "media": {
                    "$ref": "#/definitions/db.Media"
                },
                "mediaID": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "overview": {
                    "type": "string"
                },
                "runtime": {
                    "type": "integer"
                },
                "seasonNumber": {
                    "type": "integer"
                },
                "stillPath": {
                    "type": "string"
                }
            }
        },
        "api.Movie": {
            "type": "object",
            "properties": {
                "backdropImage": {
                    "type": "string"
                },
                "media": {
                    "$ref": "#/definitions/db.Media"
                },
                "mediaID": {
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "runtime": {
                    "type": "integer"
                }
            }
        },
        "api.Season": {
            "type": "object",
            "properties": {
                "episodeCount": {
                    "type": "integer"
                },
                "episodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Episode"
                    }
                },
                "media": {
                    "$ref": "#/definitions/db.Media"
                },
                "mediaID": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "overview": {
                    "type": "string"
                },
                "posterPath": {
                    "type": "string"
                },
                "seasonNumber": {
                    "type": "integer"
                },
                "seasonTMDBID": {
                    "type": "integer"
                }
            }
        },
        "api.TV": {
            "type": "object",
            "properties": {
                "backdropImage": {
                    "type": "string"
                },
                "episodeCount": {
                    "type": "integer"
                },
                "firstAirDate": {
                    "type": "string"
                },
                "lastAirDate": {
                    "type": "string"
                },
                "media": {
                    "$ref": "#/definitions/db.Media"
                },
                "mediaID": {
                    "type": "integer"
                },
                "seasonCount": {
                    "type": "integer"
                },
                "seasons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Season"
                    }
                }
            }
        },
        "db.CurrentlyWatching": {
            "type": "object"
        },
        "db.Genre": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "db.Media": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.Genre"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "mediaType": {
                    "$ref": "#/definitions/db.MediaType"
                },
                "mediaTypeId": {
                    "type": "integer"
                },
                "overview": {
                    "type": "string"
                },
                "posterImage": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "tmdbid": {
                    "type": "integer"
                }
            }
        },
        "db.MediaType": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Config": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object"
        },
        "models.UserConfig": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/models.Config"
                },
                "configID": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI Specification for DOCSWAP",
        "url": "https://swagger.io/resources/open-api/"
    }
}